@implements IDisposable
@inject GameSignalRClient _signalRClient
@inject GameStateWrapper _gameState

Fixed percentage rebate:
<input type="range" 
    min="0" 
    max="1"
    step="0.01"
    style="width: 33%"
    @bind="_rebateRate" 
    @oninput="(e) => OnRangeInput(decimal.Parse(e.Value as string))" />
@(_actualRebateRate * 100) %

@code {
    private readonly Subject<bool> _disposed = new();
    private BehaviorSubject<decimal?> _rebate = new(null);
    private decimal? _rebateRate = 0;
    private bool _dirty;
    private decimal? _actualRebateRate;

    protected override async Task OnInitializedAsync()
    {
        _rebate
            .TakeUntil(_disposed)
            .Throttle(TimeSpan.FromSeconds(0.5))
            .Where(o => o is not null)
            .Subscribe(async o =>
            {
                await _signalRClient.SetRebateRate(o!.Value);
                _dirty = false;
            });

        _gameState.CurrentPlayer
            .TakeUntil(_disposed)
            .Select(p => p?.RebateRate)
            .Subscribe(o =>
            {
                if (!_dirty)
                {
                    if (_rebate.Value != o)
                    {
                        _rebate.OnNext(o);
                    }

                    _rebateRate = o;
                }

                _actualRebateRate = o;
                StateHasChanged();
            });
    }

    private async Task OnRangeInput(decimal value)
    {
        _dirty = true;
        _rebate.OnNext(value);
    }

    public void Dispose()
    {
        _disposed.OnNext(true);
    }
}
