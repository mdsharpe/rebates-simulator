@implements IDisposable
@inject GameStateWrapper _gameState
@inject GameSignalRClient _signalRClient

<div class="balances-container">

    @foreach (var player in _players)
    {
        <div class="balances-container__player">
            <PlayerBalance Player="player"></PlayerBalance>
        </div>
    }
</div>

@code {
    private Subject<bool> _disposed = new();
    private List<PlayerView> _players;
    private IDisposable _balanceChangedSubscription;

    protected override async Task OnInitializedAsync()
    {
        Observable.CombineLatest(
            _gameState.GameState,
            _gameState.CurrentPlayer,
            (gameState, currentPlayer) =>
            {
                return gameState?.Players.Values
                    .Select(p => new PlayerView
                        {
                            Id = p.Id,
                            Name = p.Name,
                            Balance = p.Balance,
                            Stock = p.Stock,
                            IsCurrentPlayer = p.Id == currentPlayer?.Id,
                            WarehouseCapacity = p.WarehouseCapacity
                        }).ToList();
            })
            .TakeUntil(_disposed)
            .Subscribe(o =>
            {
                _players = (o ?? Enumerable.Empty<PlayerView>())
                    .OrderBy(p => p.Id)
                    .ToList();

                StateHasChanged();
            });

        _balanceChangedSubscription = _signalRClient.OnBalanceChanged(balanceChange =>
        {
            //Console.WriteLine(balanceChange.Reason);
        });
    }

    public void Dispose()
    {
        _disposed.OnNext(true);
        _balanceChangedSubscription?.Dispose();
    }
}
