@page "/game"

@implements IDisposable
@inject GameSignalRClient _signalRClient
@inject GameStateWrapper _gameState
@inject NavigationManager NavigationManager

<div class="game-container">
    <div class="game-container__scene">
        <Scene></Scene>
    </div>
    <div class="game-container__top-bar">
        <Balance></Balance>
    </div>
    @if (_isActivePlayer)
    {
        <div class="game-container__side-bar">
            <ControlRegion></ControlRegion>
        </div>
        <div class="game-container__bottom-bar">
            <RebateSlider></RebateSlider>
        </div>
    }else
    {
        <div class="game-container__bottom-bar">
            SPECTATOR MODE
        </div>
    }
</div>

@code {
    private Subject<bool> _disposed = new();
    private bool _isActivePlayer;

    protected override void OnInitialized()
    {
        if (!_signalRClient.IsConnected)
        {
            NavigationManager.NavigateTo("/");
        }

        _signalRClient.Closed += async (_) =>
        {
            NavigationManager.NavigateTo("/");
        };

        _gameState.CurrentPlayer
            .TakeUntil(_disposed)
            .Subscribe(p =>
            {
                _isActivePlayer = p is not null;
                StateHasChanged();
            });
    }

    public void Dispose()
    {
        _disposed.OnNext(true);
    }
}
